from typing import Callable

import numpy as np

y = [
    0.06,
    0.20,
    0.23,
    0.26,
    0.39,
    0.52,
    0.55,
    0.58,
    0.71,
    0.83,
    0.86,
    0.89,
    1.00,
    1.11,
    1.14,
    1.16,
    1.27,
    1.36,
    1.39,
    1.41,
    1.50,
    1.59,
    1.61,
    1.63,
    1.70,
    1.77,
    1.78,
    1.80,
    1.85,
    1.90,
    1.91,
    1.92,
    1.95,
    1.98,
    1.98,
    1.99,
    2.00,
    2.01,
    2.01,
    2.01,
]

x = [
    0.001263183018,
    0.001288930731,
    0.001295572153,
    0.001302213617,
    0.001327960758,
    0.001353706801,
    0.001360349298,
    0.001366992079,
    0.001392737839,
    0.001418482501,
    0.001425126379,
    0.001431770541,
    0.00145751492,
    0.001483258167,
    0.001489903527,
    0.001496549214,
    0.001522292133,
    0.001548033782,
    0.00155468074,
    0.001561328027,
    0.001587069347,
    0.001612809396,
    0.001619458038,
    0.001626106848,
    0.001651845873,
    0.001677582763,
    0.001684233197,
    0.001690884183,
    0.001716620522,
    0.001742354727,
    0.001749007847,
    0.001755661518,
    0.001781395171,
    0.001807121605,
    0.001813777407,
    0.0018204343,
    0.001846159642,
    0.001871880766,
    0.001878541878,
    0.001885204082,
]


def decay(target: float) -> Callable[[float], float]:

    y_norm = [(val - min(y)) / (max(y) - min(y)) for val in y]
    x_norm = [(val - min(x)) / (max(x) - min(x)) * target for val in x]

    result = np.polyfit(x_norm, y_norm, deg=2)

    def score(x: float) -> float:
        fit_val = result[0] * x**2 + result[1] * x + result[2]

        if x > target:
            return 0

        return 1 - min(max(fit_val, 0), 1)

    return score
